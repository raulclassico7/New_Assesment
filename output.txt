
> loan-application-translation-support@1.0.0 start
> npx babel-node ./www.js

DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `Schedules`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    hooks: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
Listening on port 3000
DB Message: [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: sequelizeLogger],
    type: 'SELECT',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `ManualOverrides`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    hooks: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
Connected to DB
DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `LoanApplications`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    hooks: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `MerchantConfigurations`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    hooks: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `MerchantConfigurations`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: {
      plural: 'MerchantConfigurations',
      singular: 'MerchantConfiguration'
    },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): CREATE TABLE IF NOT EXISTS `MerchantConfigurations` (`merchant_id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` VARCHAR(255) NOT NULL, `minimum_loan_amount` DECIMAL(10,2), `maximum_loan_amount` DECIMAL(10,2), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: {
      plural: 'MerchantConfigurations',
      singular: 'MerchantConfiguration'
    },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    uniqueKeys: {},
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): PRAGMA INDEX_LIST(`MerchantConfigurations`)',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: {
      plural: 'MerchantConfigurations',
      singular: 'MerchantConfiguration'
    },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    type: 'SHOWINDEXES',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `LoanApplications`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'LoanApplications', singular: 'LoanApplication' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  "Executing (default): CREATE TABLE IF NOT EXISTS `LoanApplications` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `state` TEXT NOT NULL DEFAULT 'pending_identity', `merchant_id` VARCHAR(255) NOT NULL, `requested_amount` DECIMAL(10,2) NOT NULL, `currency` TEXT DEFAULT 'usd', `user_input` VARCHAR(255), `user_input_events` VARCHAR(255) DEFAULT '[]', `final_decision` VARCHAR(255), `decision_events` VARCHAR(255) DEFAULT '[]', `selected_terms_id` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);",
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'LoanApplications', singular: 'LoanApplication' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    uniqueKeys: {},
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): PRAGMA INDEX_LIST(`LoanApplications`)',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'LoanApplications', singular: 'LoanApplication' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    type: 'SHOWINDEXES',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `ManualOverrides`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'ManualOverrides', singular: 'ManualOverride' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  "Executing (default): CREATE TABLE IF NOT EXISTS `ManualOverrides` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `ssn` VARCHAR(255) NOT NULL, `override_type` TEXT NOT NULL DEFAULT 'watchlist', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);",
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'ManualOverrides', singular: 'ManualOverride' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    uniqueKeys: {},
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): PRAGMA INDEX_LIST(`ManualOverrides`)',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'ManualOverrides', singular: 'ManualOverride' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    type: 'SHOWINDEXES',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): DROP TABLE IF EXISTS `Schedules`;',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'Schedules', singular: 'Schedule' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    cascade: true,
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  "Executing (default): CREATE TABLE IF NOT EXISTS `Schedules` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `payment_frequency` TEXT NOT NULL DEFAULT 'monthly', `number_of_payments` INTEGER, `currency` TEXT DEFAULT 'usd', `payment_amount` DECIMAL(10,2) NOT NULL, `first_payment_amount` DECIMAL(10,2) NOT NULL, `last_payment_amount` DECIMAL(10,2), `payments_total` DECIMAL(10,2) NOT NULL, `principal_total` DECIMAL(10,2) NOT NULL, `interest_total` DECIMAL(10,2) NOT NULL, `apr` DECIMAL(10,2) NOT NULL, `loan_start_date` DATETIME, `first_payment_date` DATETIME, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);",
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'Schedules', singular: 'Schedule' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    uniqueKeys: {},
    type: 'RAW',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): PRAGMA INDEX_LIST(`Schedules`)',
  {
    plain: false,
    raw: true,
    logging: [Function: sequelizeLogger],
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'Schedules', singular: 'Schedule' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [SqliteDialect],
      queryInterface: [SQLiteQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    force: true,
    type: 'SHOWINDEXES',
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [ 'Database Built' ]
DB Message: [
  'Executing (default): INSERT INTO `MerchantConfigurations` (`merchant_id`,`name`,`minimum_loan_amount`,`maximum_loan_amount`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4,$5);',
  {
    plain: false,
    raw: false,
    logging: [Function: sequelizeLogger],
    hooks: true,
    validate: true,
    fields: [
      'merchant_id',
      'name',
      'minimum_loan_amount',
      'maximum_loan_amount',
      'createdAt',
      'updatedAt'
    ],
    defaultFields: [
      'merchant_id',
      'name',
      'minimum_loan_amount',
      'maximum_loan_amount',
      'createdAt',
      'updatedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    type: 'INSERT',
    instance: MerchantConfiguration {
      dataValues: [Object],
      _previousDataValues: [Object],
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: MerchantConfiguration,
    bind: [
      "Zelda's Stationary",
      100,
      3000,
      '2024-02-23 18:33:11.848 +00:00',
      '2024-02-23 18:33:11.848 +00:00'
    ],
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
DB Message: [
  'Executing (default): INSERT INTO `ManualOverrides` (`id`,`ssn`,`override_type`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);',
  {
    plain: false,
    raw: false,
    logging: [Function: sequelizeLogger],
    hooks: true,
    validate: true,
    fields: [ 'id', 'ssn', 'override_type', 'createdAt', 'updatedAt' ],
    defaultFields: [ 'id', 'ssn', 'override_type', 'createdAt', 'updatedAt' ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'sqlite',
    dialectModule: null,
    dialectModulePath: null,
    host: '',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    clientMinMessages: 'warning',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    dialectOptions: [Object: null prototype] {},
    type: 'INSERT',
    instance: ManualOverride {
      dataValues: [Object],
      _previousDataValues: [Object],
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: ManualOverride,
    bind: [
      '987-65-4321',
      'watchlist',
      '2024-02-23 18:33:11.848 +00:00',
      '2024-02-23 18:33:11.848 +00:00'
    ],
    uuid: 'default',
    storage: ':memory:',
    inMemory: 1,
    readWriteMode: 6
  }
]
